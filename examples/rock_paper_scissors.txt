#	
#	rock_paper_scissors.txt
#
#	Written by Alex Ruth for the 2020 OLC Code Jam
#
#	Rock paper scissors against an RNG CPU!
#

.data

rps:      .asciiz "Rock (0), paper (1), or scissors (2)? "
error:    .asciiz "Invalid input, choose 0, 1, or 2: "

win_msg:      .asciiz "You win!"
lose_msg:     .asciiz "You lose!"
tie_msg:      .asciiz "It's a tie!"

rock:     .asciiz "Rock"
paper:    .asciiz "Paper"
scissors: .asciiz "Scissors"

you:      .asciiz "You chose: "
them:     .asciiz "They chose: "

invalid_msg: .asciiz "Invalid input - choose (0, 1, 2). Quitting..."

.text

ori $a0, $zero, rps

jal print_string

invalid_input:
jal get_single_digit_integer

add $t0, $zero, $a0	#$t0 = player's move

#Get random number
ori $v0, $zero, 7
syscall

ori $t1, $zero, 3
div $v0, $t1
mfhi $t1		#$t1 = CPU's move

ori $a0, $zero, you
jal print_string

add $a0, $zero, $t0
jal print_move
jal print_newline

ori $a0, $zero, them
jal print_string

add $a0, $zero, $t1
jal print_move
jal print_newline

jal determine_winner

j done

#Print a move (0 = rock, 1 = paper, 2 = scissors)
print_move:

    ori $t2, $zero, 0
    beq $a0, $t2, is_rock

    ori $t2, $zero, 1
    beq $a0, $t2, is_paper

    ori $t2, $zero, 2
    beq $a0, $t2, is_scissors

    ori $a0, $zero, invalid_msg
    jal print_string
    j done

is_rock:
    ori $a0, $zero, rock
    j _print_move

is_paper:
    ori $a0, $zero, paper
    j _print_move

is_scissors:
    ori $a0, $zero, scissors

_print_move:

    #Store return address
    add $t2, $zero, $ra
    jal print_string
    add $ra, $zero, $t2

    jr $ra


#Print string
print_string:

   ori $v0, $zero, 3
   syscall

   jr $ra

#Print newline
print_newline:

   ori $a0, $zero, 10
   ori $v0, $zero, 6
   syscall

   jr $ra

#Store result in $a0
get_single_digit_integer:

    ori $v0, $zero, 5		#Read character
    syscall
    
    addi $a0, $v0, -48

    ori $v0, $zero, 9		#Flush buffer
    syscall

    jr $ra

determine_winner:

    beq $t0, $t1, tie

    ori $t2, $zero, 0
    beq $t0, $t2, you_chose_rock

    ori $t2, $zero, 1
    beq $t0, $t2, you_chose_paper

    ori $t2, $zero, 2
    beq $t0, $t2, you_chose_scissors

you_chose_rock:
    ori $t2, $zero, 1
    beq $t1, $t2, they_win
    j you_win

you_chose_paper:
    ori $t2, $zero, 2
    beq $t1, $t2, they_win
    j you_win

you_chose_scissors:
    ori $t2, $zero, 0
    beq $t1, $t2, they_win
    j you_win

you_win:
    ori $a0, $zero, win_msg
    j print_result

they_win:
    ori $a0, $zero, lose_msg
    j print_result

tie:
    ori $a0, $zero, tie_msg

print_result:

    add $t2, $zero, $ra
    jal print_string
    add $ra, $zero, $t2

    jr $ra

done: